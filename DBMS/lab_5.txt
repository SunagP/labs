1. Implement MongoDB queries using CRUD operations for a restaurants collection


2. For the structure of “Restaurants “ collection  Write a MongoDB query
db.restaurant.insert({   "address": {      "building": "1007",      "coord": [ -73.856077, 40.848447 ],      "street": "Morris Park Ave",      "zipcode": "10462"   },   "borough": "Bronx",   "cuisine": "Bakery",   "grades": [      { "date": { "$date": 1393804800000 }, "grade": "A", "score": 2 },      { "date": { "$date": 1378857600000 }, "grade": "A", "score": 6 },      { "date": { "$date": 1358985600000 }, "grade": "A", "score": 10 },      { "date": { "$date": 1322006400000 }, "grade": "A", "score": 9 },      { "date": { "$date": 1299715200000 }, "grade": "B", "score": 14 }   ],   "name": "Morris Park Bake Shop",   "restaurant_id": "30075445" })

I. to display all the documents in the collection restaurants
db.restaurant.find()

II. to display the fields restaurant_id, name, borough and cuisine for all the
documents in the collection restaurant.

db.restaurant.find({},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1})


III. to display the fields restaurant_id, name, borough and cuisine, but exclude the
field _id for all the documents in the collection restaurant
db.restaurant.find({},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1,"_id":0})

IV. to display all the restaurant which is in the borough Bronx
db.restaurant.find({"borough": "Bronx"}).pretty()


V. to display the first 5 restaurant which is in the borough Bronx
db.restaurant.find({"borough": "Bronx"}).limit(3).pretty()

VI. to find the restaurants who achieved a score more than 90
db.restaurant.find({grades : { $elemMatch:{"score":{$gt : 9}}}})

VII. to find the restaurants that achieved a score, more than 80 but less than
100
db.restaurant.find({grades : { $elemMatch:{"score":{$gt : 8 , $lt :10}}}}).pretty()